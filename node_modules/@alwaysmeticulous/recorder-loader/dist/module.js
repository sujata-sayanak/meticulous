const $7d7683134fbb8fec$export$d16af6ab0c202bae = "https://snippet.meticulous.ai";


const $5d774bdb3a883001$var$DEFAULT_MAX_MS_TO_BLOCK_FOR = 2000;
const $5d774bdb3a883001$export$f80553af9d70f9fd = async (options)=>{
    // Try to load the recorder and silence any initialisation error.
    await $5d774bdb3a883001$var$unsafeLoadAndStartRecorder(options).catch((error)=>{
        console.error(error);
    });
};
const $5d774bdb3a883001$var$unsafeLoadAndStartRecorder = ({ projectId: projectId , uploadIntervalMs: uploadIntervalMs , snapshotLinkedStylesheets: snapshotLinkedStylesheets , commitHash: commitHash , maxMsToBlockFor: maxMsToBlockFor_ , snippetsBaseUrl: snippetsBaseUrl , forceRecording: forceRecording , responseSanitizers: responseSanitizers , isProduction: isProduction  })=>{
    let abandoned = false;
    return new Promise((resolve, reject)=>{
        const maxMsToBlockFor = maxMsToBlockFor_ ?? $5d774bdb3a883001$var$DEFAULT_MAX_MS_TO_BLOCK_FOR;
        if (maxMsToBlockFor > 0) setTimeout(()=>{
            abandoned = true;
            resolve();
        }, maxMsToBlockFor);
        const script = document.createElement("script");
        script.type = "text/javascript";
        const baseSnippetsUrl = snippetsBaseUrl || (0, $7d7683134fbb8fec$export$d16af6ab0c202bae);
        script.src = new URL("v1/meticulous-manual-init.js", baseSnippetsUrl).href;
        // Setup configuration
        const typedWindow = window;
        typedWindow.METICULOUS_RECORDING_TOKEN = projectId;
        if (uploadIntervalMs !== undefined) typedWindow.METICULOUS_UPLOAD_INTERVAL_MS = uploadIntervalMs;
        if (commitHash !== undefined) typedWindow.METICULOUS_APP_COMMIT_HASH = commitHash;
        if (snapshotLinkedStylesheets !== undefined) typedWindow.METICULOUS_SNAPSHOT_LINKED_STYLESHEETS = snapshotLinkedStylesheets;
        if (forceRecording !== undefined) typedWindow.METICULOUS_FORCE_RECORDING = forceRecording;
        if (isProduction !== undefined) typedWindow.METICULOUS_IS_PRODUCTION_ENVIRONMENT = isProduction;
        if (responseSanitizers != null && responseSanitizers.length > 0) typedWindow.METICULOUS_NETWORK_RESPONSE_SANITIZERS = responseSanitizers;
        script.onload = function() {
            if (abandoned) {
                console.debug("Meticulous snippet abandoned due to max blocking time reached.");
                // At this point the promise has already resolved.
                return;
            }
            const initialiseRecorder = window.__meticulous?.initialiseRecorder;
            if (typeof initialiseRecorder !== "function") {
                reject("Meticulous recorder failed to initialise.");
                return;
            }
            try {
                initialiseRecorder();
            } catch (error) {
                reject(error);
            }
            resolve();
        };
        script.onerror = ()=>{
            reject("Meticulous recorder failed to initialise.");
        };
        document.head.appendChild(script);
    });
};
const $5d774bdb3a883001$export$9da0cde53b499187 = $5d774bdb3a883001$var$unsafeLoadAndStartRecorder;




const $d91c442ec5d010f4$export$c0c9d1ed5ecb2675 = async (options = {
    maxMsToBlockFor: 2000
})=>{
    let requestedToStopIntercepting = false;
    let disposedEarlyNetworkRecorder = false;
    const stopIntercepting = async ()=>{
        requestedToStopIntercepting = true;
        const disposeFunction = window?.__meticulous?.earlyNetworkRecorder?.dispose;
        if (disposeFunction && !disposedEarlyNetworkRecorder) {
            await disposeFunction();
            disposedEarlyNetworkRecorder = true;
        }
    };
    const startRecordingSession = (0, $5d774bdb3a883001$export$f80553af9d70f9fd);
    const interceptor = {
        startRecordingSession: startRecordingSession,
        stopIntercepting: stopIntercepting
    };
    const promise = new Promise((resolve, reject)=>{
        const timeout = options.maxMsToBlockFor > 0 ? setTimeout(()=>{
            resolve(interceptor);
        }, options.maxMsToBlockFor) : null;
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src = `${0, $7d7683134fbb8fec$export$d16af6ab0c202bae}/record/v1/network-recorder.bundle.js`;
        script.onload = function() {
            if (timeout) window.clearTimeout(timeout);
            resolve(interceptor);
        };
        script.onerror = ()=>{
            if (timeout) window.clearTimeout(timeout);
            reject("Meticulous early network recorder failed to initialise.");
        };
        document.head.appendChild(script);
    });
    // Try to load the early network recorder and silence any initialisation error.
    return promise.catch((error)=>{
        console.error(error);
        return interceptor;
    }).finally(()=>{
        if (requestedToStopIntercepting) stopIntercepting();
    });
};




export {$5d774bdb3a883001$export$9da0cde53b499187 as loadAndStartRecorder, $5d774bdb3a883001$export$f80553af9d70f9fd as tryLoadAndStartRecorder, $d91c442ec5d010f4$export$c0c9d1ed5ecb2675 as tryInstallMeticulousIntercepts};
//# sourceMappingURL=module.js.map
