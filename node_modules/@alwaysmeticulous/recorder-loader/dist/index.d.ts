import { NetworkResponseSanitizer } from "@alwaysmeticulous/sdk-bundles-api";
interface LoaderOptions {
    projectId: string;
    uploadIntervalMs?: number;
    snapshotLinkedStylesheets?: boolean;
    commitHash?: string;
    maxMsToBlockFor?: number;
    snippetsBaseUrl?: string;
    isProduction?: boolean;
    /**
     * Optional. Disables abandonment due to payload size behaviour.
     *
     * The recorder will automatically abandon if it detects that the load on the network is too large.
     * This is a protection mechanism for production deployments to prevent any performance degradation.
     *
     * If you are recording local / staging sessions or seeing high abandon rate you may want to set this to true.
     *
     * @default false
     */
    forceRecording?: boolean;
    /**
     * Optional. Allows sanitizing network responses before they are sent to Meticulous's servers.
     */
    responseSanitizers?: NetworkResponseSanitizer[];
}
/**
 * Load and start the Meticulous Recorder
 */
export const tryLoadAndStartRecorder: (options: LoaderOptions) => Promise<void>;
/**
 * @deprecated Use `tryLoadAndStartRecorder` instead.
 *
 * Load and start the Meticulous Recorder
 */
export const loadAndStartRecorder: ({ projectId, uploadIntervalMs, snapshotLinkedStylesheets, commitHash, maxMsToBlockFor: maxMsToBlockFor_, snippetsBaseUrl, forceRecording, responseSanitizers, isProduction, }: LoaderOptions) => Promise<void>;
interface Interceptor {
    startRecordingSession: (options: LoaderOptions) => Promise<void>;
    stopIntercepting: () => Promise<void>;
}
/**
 * Stores a copy of network requests and responses in memory, but doesn't send them to the
 * server, until the the main recorder is initialised.
 *
 * This is useful if you only want to record sessions for certain users with certain attributes. In
 * this case you have an issue: you need to wait for the user information to load before you know whether
 * you can enable the recorder, but if you enable the recorder after the user information has loaded
 * then the recorder won't be able to capture the initial request & response to load the user information,
 * or other early network responses.
 *
 * The early network recorder solves this: load the early network recorder for all sessions,
 * but only load the main recorder for sessions that you want to record. If when you load the user data
 * you find out you don't want to record the session then you can call the stopRecording() method returned
 * by this method.
 *
 * Example usage:
 *
 * ```
 * // The below call should happen before your app makes any network requests,
 * // or executes any methods that may store a reference to window.fetch or XMLHttpRequest.
 * const interceptor = await tryInstallMeticulousIntercepts();
 *
 * // Later, when you have loaded user data...
 * const userData = await loadUserInfo();
 * if (shouldRecord(userData)) {
 *  await interceptor.startRecordingSession({ ... });
 * } else {
 *  interceptor.stopIntercepting();
 * }
 * ```
 */
export const tryInstallMeticulousIntercepts: (options?: {
    maxMsToBlockFor: number;
}) => Promise<Interceptor>;

//# sourceMappingURL=index.d.ts.map
